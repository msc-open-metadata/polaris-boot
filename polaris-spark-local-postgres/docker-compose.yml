services:
  polaris-postgres:
    # IMPORTANT: the image MUST contain the Postgres JDBC driver and EclipseLink dependencies, see README for instructions
    image: apache/polaris:postgres-latest
    container_name: polaris
    ports:
      # API port
      - "8181:8181"
      # Management port (metrics and health checks)
      - "8182:8182"
      # Optional, allows attaching a debugger to the Polaris JVM
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
      polaris-bootstrap:
        condition: service_started

    volumes:
      - ./icebergdata:/data
      - ./assets/eclipselink/:/deployments/config/eclipselink
    environment:
      AWS_REGION: $AWS_REGION
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      JAVA_DEBUG: "true"
      JAVA_DEBUG_PORT: "*:5005"
      polaris.persistence.type: eclipse-link
      polaris.persistence.eclipselink.configuration-file: /deployments/config/eclipselink/persistence.xml
      polaris.realm-context.realms: POLARIS
      quarkus.otel.sdk.disabled: "true"
    healthcheck:
          test: ["CMD", "curl", "http://localhost:8182/healthcheck"]
          interval: 10s
          timeout: 10s
          retries: 5

  polaris-bootstrap:
      # IMPORTANT: the image MUST contain the Postgres JDBC driver and EclipseLink dependencies, see README for instructions
      image: apache/polaris-admin-tool:postgres-latest
      depends_on:
        postgres:
          condition: service_healthy
      environment:
        polaris.persistence.type: eclipse-link
        polaris.persistence.eclipselink.configuration-file: /deployments/config/eclipselink/persistence.xml
      volumes:
        - ./assets/eclipselink/:/deployments/config/eclipselink
      command:
        - "bootstrap"
        - "--realm=POLARIS"
        - "--credential=POLARIS,root,s3cr3t"

  postgres:
      image: postgres:17.2
      ports:
        - "5432:5432"
      # set shared memory limit when using docker-compose
      shm_size: 128mb
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: POLARIS
        POSTGRES_INITDB_ARGS: "--encoding UTF8 --data-checksums"
      healthcheck:
        test: "pg_isready -U postgres"
        interval: 5s
        timeout: 2s
        retries: 15

  jupyter-spark:
    image: spark-jupyter
    ports:
      - "8888:8888"
    environment:
      - AWS_REGION=$AWS_REGION
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - POLARIS_HOST=POLARIS
    container_name: spark
    depends_on:
      polaris-postgres:
        condition: service_healthy
    volumes:
      - ./icebergdata:/data
      - ./notebooks:/home/docker/notebooks
    secrets:
      - engineer_client_id
      - engineer_client_secret
      - hr_client_id
      - hr_client_secret


secrets:
  engineer_client_id:
    file: ../secrets/engineer-client-id
  engineer_client_secret:
    file: ../secrets/engineer-client-secret
  hr_client_id:
    file: ../secrets/hr-client-id
  hr_client_secret:
    file: ../secrets/hr-client-secret
