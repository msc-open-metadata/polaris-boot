services:
  polaris-postgres:
    # IMPORTANT: the image MUST contain the Postgres JDBC driver and EclipseLink dependencies, see README for instructions
    image: apache/polaris
    container_name: polaris
    ports:
      # API port
      - "8181:8181"
      # Management port (metrics and health checks)
      - "8182:8182"
    depends_on:
      postgres:
        condition: service_healthyCreate database opendict_iceberg;
        USE ROLE ACCOUNTADMIN;
        USE ROLE TRAINING_ROLE;

        -- Setting up and external volume to azure: https://docs.snowflake.com/en/user-guide/tables-iceberg-configure-external-volume-azure
        ALTER DATABASE opendict_iceberg SET CATALOG = 'AZURE_CATALOG';
        CREATE or replace EXTERNAL VOLUME AZURESTORAGEVOL
          STORAGE_LOCATIONS =
            (
              (
                NAME = 'polarisstorageacc'
                STORAGE_PROVIDER = 'AZURE'
                STORAGE_BASE_URL = 'azure://polarisstorageacc.blob.core.windows.net/polarisbucket/warehouse'
                AZURE_TENANT_ID = 'bea229b6-7a08-4086-b44c-71f57f716bdb'
              )
            );
        DESC EXTERNAL VOLUME AZURESTORAGEVOL;
        SELECT SYSTEM$VERIFY_EXTERNAL_VOLUME('AZURESTORAGEVOL');



        -- Setting up a Polaris catalog integration.
        CREATE OR REPLACE CATALOG INTEGRATION AZURE_CATALOG
          CATALOG_SOURCE = POLARIS
          TABLE_FORMAT = ICEBERG
          REST_CONFIG = (
            CATALOG_URI = 'https://opendict.duckdns.org/api/catalog'
            CATALOG_NAME = 'AZURE_CATALOG'

          )
          REST_AUTHENTICATION = (
            TYPE = OAUTH
            OAUTH_TOKEN_URI = 'https://opendict.duckdns.org/api/catalog/v1/oauth/tokens'
            OAUTH_CLIENT_ID = '42635de75d261729'
            OAUTH_CLIENT_SECRET = '28643c4e26b9e6284fec7b8bda644fc8'
            OAUTH_ALLOWED_SCOPES = ('PRINCIPAL_ROLE:ALL')
          )
          ENABLED = TRUE;
        SELECT SYSTEM$VERIFY_CATALOG_INTEGRATION('AZURE_CATALOG');


        -- Create taxis iceberg table
        CREATE or replace ICEBERG TABLE taxis
          CATALOG = 'AZURE_CATALOG'
          EXTERNAL_VOLUME='AZURESTORAGEVOL'
          CATALOG_NAMESPACE = 'nyc'
          CATALOG_TABLE_NAME = 'taxis'
          AUTO_REFRESH = TRUE;


        -- 5. Snowflake DEMO
        CREATE OR REPLACE CATALOG INTEGRATION AZURE_CATALOG...;
        CREATE or replace EXTERNAL VOLUME AZURESTORAGEVOL...;
        CREATE or replace ICEBERG TABLE taxis...;

        -- 5.1. Show the synced function
        show user functions;

        -- 5.2. Examine datalake.
        SELECT SYSTEM$LIST_NAMESPACES_FROM_CATALOG('AZURE_CATALOG');
        SELECT SYSTEM$LIST_ICEBERG_TABLES_FROM_CATALOG('AZURE_CATALOG', 'SYSTEM');
        SELECT SYSTEM$LIST_ICEBERG_TABLES_FROM_CATALOG('AZURE_CATALOG', 'nyc');

        -- 5.3. Query the taxis table
        SELECT
            tpep_pickup_datetime,
            tpep_dropoff_datetime,
            passenger_count,
            trip_distance,
            usd_to_dkk(fare_amount)
        FROM taxis limit 10;





      polaris-bootstrap:
        condition: service_started
    volumes:
      - ./icebergdata:/data
      - ./assets/eclipselink/:/deployments/config/eclipselink
    environment:
      AZURE_TENANT_ID: $AZURE_TENANT_ID
      AZURE_CLIENT_ID: $AZURE_CLIENT_ID
      AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
      POLARIS_PERSISTENCE_TYPE: relational-jdbc
      POLARIS_PERSISTENCE_RELATIONAL_JDBC_MAX_RETRIES: 5
      POLARIS_PERSISTENCE_RELATIONAL_JDBC_INITIAL_DELAY_IN_MS: 100
      POLARIS_PERSISTENCE_RELATIONAL_JDBC_MAX_DURATION_IN_MS: 5000
      QUARKUS_DATASOURCE_DB_KIND: pgsql
      QUARKUS_DATASOURCE_JDBC_URL: $QUARKUS_DATASOURCE_JDBC_URL
      QUARKUS_DATASOURCE_USERNAME: $QUARKUS_DATASOURCE_USERNAME
      QUARKUS_DATASOURCE_PASSWORD: $QUARKUS_DATASOURCE_PASSWORD
      POLARIS_REALM_CONTEXT_REALMS: POLARIS
      QUARKUS_OTEL_SDK_DISABLED: true
      POLARIS_BOOTSTRAP_CREDENTIALS: POLARIS,$CLIENT_ID,$CLIENT_SECRET
      polaris.features."ALLOW_INSECURE_STORAGE_TYPES": "true"
      polaris.features."SUPPORTED_CATALOG_STORAGE_TYPES": '["FILE","S3","GCS","AZURE"]'
      polaris.readiness.ignore-severe-issues: "true"
      QUARKUS_LOG_LEVEL: INFO
      HADOOP_HOME: /home/polaris/hadoop
      hadoop.home.dir: /home/polaris/hadoop
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - iceberg_net
    secrets:
      - engineer_client_id
      - engineer_client_secret
      - hr_client_id
      - hr_client_secret
    # Create hadoop folder and export variable
    command: >
      bash -c "
        mkdir -p /home/polaris/hadoop &&
        export HADOOP_HOME=/home/polaris/hadoop &&
        java -jar /deployments/quarkus-run.jar"

  polaris-bootstrap:
    image: apache/polaris-admin-tool:postgres-latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POLARIS_PERSISTENCE_TYPE=relational-jdbc
      - QUARKUS_DATASOURCE_DB_KIND=pgsql
      - QUARKUS_DATASOURCE_JDBC_URL=${QUARKUS_DATASOURCE_JDBC_URL}
      - QUARKUS_DATASOURCE_USERNAME=${QUARKUS_DATASOURCE_USERNAME}
      - QUARKUS_DATASOURCE_PASSWORD=${QUARKUS_DATASOURCE_PASSWORD}
    command:
      - "bootstrap"
      - "--realm=POLARIS"
      - "--credential=POLARIS,root,s3cr3t"
    networks:
      - iceberg_net

  postgres:
    image: postgres:17.5-alpine
    ports:
      - "5432:5432"
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: POLARIS
      POSTGRES_INITDB_ARGS: "--encoding UTF8 --data-checksums"
    volumes:
      # Bind local conf file to a convenient location in the container
      - type: bind
        source: ${ASSETS_PATH}/postgres/postgresql.conf
        target: /etc/postgresql/postgresql.conf
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      timeout: 2s
      retries: 15
    networks:
      - iceberg_net

secrets:
  engineer_client_id:
    file: ../secrets/engineer-client-id
  engineer_client_secret:
    file: ../secrets/engineer-client-secret
  hr_client_id:
    file: ../secrets/hr-client-id
  hr_client_secret:
    file: ../secrets/hr-client-secret
  snowflake-conf:
    file: ../secrets/snowflake-conf.toml

networks:
  iceberg_net:
    driver: bridge
