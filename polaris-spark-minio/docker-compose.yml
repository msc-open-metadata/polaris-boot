services:
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      iceberg_net:
    depends_on:
      - polaris-postgres
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
    secrets:
      - engineer_client_id
      - engineer_client_secret
      - hr_client_id
      - hr_client_secret

  polaris-postgres:
    # IMPORTANT: the image MUST contain the Postgres JDBC driver and EclipseLink dependencies, see README for instructions
    image: apache/polaris:postgres-latest
    container_name: polaris
    ports:
      # API port
      - "8181:8181"
      # Management port (metrics and health checks)
      - "8182:8182"
    depends_on:
      postgres:
        condition: service_healthy
      polaris-bootstrap:
        condition: service_started
    volumes:
      - ./warehouse:/data
      - ../assets/eclipselink/:/deployments/config/eclipselink
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - polaris.persistence.type=eclipse-link
      - polaris.persistence.eclipselink.configuration-file=/deployments/config/eclipselink/persistence.xml
      - polaris.realm-context.realms=POLARIS
      - quarkus.otel.sdk.disabled="true"
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5

  polaris-bootstrap:
    # IMPORTANT: the image MUST contain the Postgres JDBC driver and EclipseLink dependencies, see README for instructions
    image: apache/polaris-admin-tool:postgres-latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      polaris.persistence.type: eclipse-link
      polaris.persistence.eclipselink.configuration-file: /deployments/config/eclipselink/persistence.xml
    volumes:
      - ../assets/eclipselink/:/deployments/config/eclipselink
    command:
      - "bootstrap"
      - "--realm=POLARIS"
      - "--credential=POLARIS,root,s3cr3t"

  postgres:
    image: postgres:17.2
    ports:
      - "5432:5432"
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: POLARIS
      POSTGRES_INITDB_ARGS: "--encoding UTF8 --data-checksums"
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      timeout: 2s
      retries: 15
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc: # CLI for minio
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    volumes:
      - ./assets:/root/.mc
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      /usr/bin/mc admin user add minio polaris-user polaris-password
      /usr/bin/mc admin policy create minio polaris-policy /root/.mc/polaris-policy.json
      /usr/bin/mc admin policy attach minio polaris-policy --user polarisuser
      tail -f /dev/null
      "
networks:
  iceberg_net:

secrets:
  engineer_client_id:
    file: ../secrets/engineer-client-id
  engineer_client_secret:
    file: ../secrets/engineer-client-secret
  hr_client_id:
    file: ../secrets/hr-client-id
  hr_client_secret:
    file: ../secrets/hr-client-secret
